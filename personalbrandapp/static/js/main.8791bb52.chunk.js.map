{"version":3,"sources":["js/Markdown.js","js/blog/BlogPost.js","js/blog/Blog.js","js/ButtonAppBar.js","App.js","serviceWorker.js","index.js"],"names":["options","overrides","h1","component","Typography","props","gutterBottom","variant","h2","h3","h4","paragraph","p","a","Link","li","withStyles","theme","listItem","marginTop","spacing","classes","className","Markdown","BlogPost","this","Card","card","markdown","text","Component","margin","typography","body2","padding","backgroundColor","Blog","state","blogpost","index","blogposts","posts","fetch","filename","then","response","setState","concat","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","title","ButtonAppBar","AppBar","position","Toolbar","href","color","createMuiTheme","palette","primary","main","secondary","type","useNextVariants","App","background","headerSpace","Container","Grid","item","xs","md","BLOGPOST","paddingTop","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4oBAYMA,EAAU,CACdC,UAAW,CACTC,GAAI,CACFC,UAAWC,IACXC,MAAO,CACLC,cAAc,EACdC,QAAS,OAGbC,GAAI,CAAEL,UAAWC,IAAYC,MAAO,CAAEC,cAAc,EAAMC,QAAS,OACnEE,GAAI,CAAEN,UAAWC,IAAYC,MAAO,CAAEC,cAAc,EAAMC,QAAS,cACnEG,GAAI,CACFP,UAAWC,IACXC,MAAO,CAAEC,cAAc,EAAMC,QAAS,UAAWI,WAAW,IAE9DC,EAAG,CAAET,UAAWC,IAAYC,MAAO,CAAEM,WAAW,IAChDE,EAAG,CAAEV,UAAWW,KAChBC,GAAI,CACFZ,UAAWa,aAxBF,SAAAC,GAAK,MAAK,CACvBC,SAAU,CACRC,UAAWF,EAAMG,QAAQ,OAsBZJ,EAAmB,gBAAGK,EAAH,EAAGA,QAAYhB,EAAf,kCAC5B,wBAAIiB,UAAWD,EAAQH,UACrB,kBAACd,EAAA,EAAD,eAAYD,UAAU,QAAWE,WAO5B,SAASkB,EAASlB,GAC/B,OAAO,kBAAC,IAAD,eAAeL,QAASA,GAAaK,ICjC9C,IAeMmB,E,iLAEM,IACAH,EAAYI,KAAKpB,MAAjBgB,QACR,OACE,kBAACK,EAAA,EAAD,CAAMJ,UAAWD,EAAQM,MACvB,kBAACJ,EAAD,CAAUD,UAAWD,EAAQO,UAC1BH,KAAKpB,MAAMwB,W,GAPCC,aAmBRd,eAlCA,SAAAC,GAAK,MAAK,CACvBU,KAAM,CACJI,OAAQd,EAAMG,QAAQ,IAExBQ,SAAS,eACJX,EAAMe,WAAWC,MADd,CAENC,QAASjB,EAAMG,QAAQ,GACvBW,OAAQ,EACRI,gBAAiB,aA0BNnB,CAAmBQ,GC5B5BY,E,YAEJ,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KACDgC,MAAQ,CAAEC,SAAU,IAFR,E,iFAKE,IAAD,OAClB,IAAK,IAAIC,KAASd,KAAKpB,MAAMmC,UAAUC,MACrCC,MAAM,IAAMjB,KAAKpB,MAAMmC,UAAUC,MAAMF,GAAOI,UAAUC,MAAK,SAACC,GAAD,OAAcA,EAAShB,UACjFe,MAAK,SAAAf,GACJ,EAAKiB,SAAS,CAACR,SAAU,EAAKD,MAAMC,SAASS,OAC3C,kBAAC,EAAD,CAAUlB,KAAMA,Y,+BAOJJ,KAAKpB,MAAjBgB,QACR,OACE,6BACGI,KAAKY,MAAMC,c,GAtBDR,aA+BJd,eArCA,SAAAC,GAAK,MAAK,KAqCVD,CAAmBoB,G,wBCrC5BY,EAAYC,aAAW,SAAAhC,GAAK,MAAK,CACrCiC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAapC,EAAMG,QAAQ,IAE7BkC,MAAO,CACLH,SAAU,OAIC,SAASI,IACtB,IAAMlC,EAAU2B,IAEhB,OACE,yBAAK1B,UAAWD,EAAQ6B,MACtB,kBAACM,EAAA,EAAD,CAAQC,SAAS,SACf,kBAACC,EAAA,EAAD,KACE,kBAACtD,EAAA,EAAD,CAAYG,QAAQ,KAAKe,UAAWD,EAAQiC,OAC1C,kBAACxC,EAAA,EAAD,CAAM6C,KAAK,IAAKC,MAAM,WAAtB,gBAIF,kBAACxD,EAAA,EAAD,CAAYG,QAAQ,KAAKe,UAAWD,EAAQiC,OAA5C,W,4CCrBJrC,EAAQ4C,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,WACnBE,KAAM,SAERlC,WAAY,CAAEmC,iBAAiB,KAe3BC,E,YAGJ,WAAY/D,GAAQ,qEACZA,I,sEAGE,IACAgB,EAAYI,KAAKpB,MAAjBgB,QAER,OACE,yBAAKC,UAAWD,EAAQgD,YACtB,kBAAC,IAAD,CAAkBpD,MAAOA,GACvB,kBAACsC,EAAD,MACA,yBAAKjC,UAAWD,EAAQiD,cACxB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAAEC,GAAI,GAAIC,GAAI,IACtB,kBAAC,EAAD,CAAMnC,UAAWoC,Y,GAjBb9C,aA0BHd,eAtCA,SAAAC,GAAK,MAAK,CACvBqD,YAAY,eACPrD,EAAMe,WAAWC,MADX,CAET4C,WAAY5D,EAAMG,QAAQ,MAE5BiD,WAAY,CACVlC,gBAAiB,UACjB2C,UAAW,QACX5C,QAASjB,EAAMG,QAAQ,OA8BZJ,CAAmBoD,GC7CdW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.8791bb52.chunk.js","sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'markdown-to-jsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nconst styles = theme => ({\n  listItem: {\n    marginTop: theme.spacing(1),\n  },\n});\n\nconst options = {\n  overrides: {\n    h1: {\n      component: Typography,\n      props: {\n        gutterBottom: true,\n        variant: 'h5',\n      },\n    },\n    h2: { component: Typography, props: { gutterBottom: true, variant: 'h6' } },\n    h3: { component: Typography, props: { gutterBottom: true, variant: 'subtitle1' } },\n    h4: {\n      component: Typography,\n      props: { gutterBottom: true, variant: 'caption', paragraph: true },\n    },\n    p: { component: Typography, props: { paragraph: true } },\n    a: { component: Link },\n    li: {\n      component: withStyles(styles)(({ classes, ...props }) => (\n        <li className={classes.listItem}>\n          <Typography component=\"span\" {...props} />\n        </li>\n      )),\n    },\n  },\n};\n\nexport default function Markdown(props) {\n  return <ReactMarkdown options={options} {...props} />;\n}","import React, {Component} from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport Markdown from '../Markdown';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  card: {\r\n    margin: theme.spacing(3),\r\n  },\r\n  markdown: {\r\n    ...theme.typography.body2,\r\n    padding: theme.spacing(3),\r\n    margin: 0,\r\n    backgroundColor: 'white',\r\n  },\r\n});\r\n\r\n/*\r\n* @text the markdown of the blogpost\r\n*/\r\nclass BlogPost extends Component {\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return ( \r\n      <Card className={classes.card}>\r\n        <Markdown className={classes.markdown}>\r\n          {this.props.text}\r\n        </Markdown>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nBlogPost.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(BlogPost);","import React, {Component} from 'react';\r\n\r\nimport BlogPost from './BlogPost';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst styles = theme => ({\r\n});\r\n\r\n/*\r\n* @blogposts the filename of the blogpost\r\n*/\r\nclass Blog extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { blogpost: []};\r\n  }\r\n\r\n  componentDidMount() {\r\n    for (var index in this.props.blogposts.posts) {\r\n      fetch(\"/\" + this.props.blogposts.posts[index].filename).then((response) => response.text())\r\n        .then(text => {\r\n          this.setState({blogpost: this.state.blogpost.concat(\r\n            <BlogPost text={text}/>\r\n          )})\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return ( \r\n      <div>\r\n        {this.state.blogpost}\r\n      </div>);\r\n  }\r\n}\r\n\r\nBlog.propTypes = {\r\n    blogposts: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(Blog);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            <Link href=\"/\"  color=\"inherit\">\n              Benjamin Yu\n            </Link>\n          </Typography>\n          <Typography variant=\"h6\" className={classes.title}>\n            Blog\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React, {Component} from 'react';\nimport Blog from './js/blog/Blog';\nimport ButtonAppBar from './js/ButtonAppBar';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport BLOGPOST from './blogposts/blogpost.json';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#c6ebc6' }, //light green\n    secondary: { main: '#FFF8EF' }, //tan\n    type: 'light',\n  },\n  typography: { useNextVariants: true },\n});\n\nconst styles = theme => ({\n  headerSpace: {\n    ...theme.typography.body2,\n    paddingTop: theme.spacing(10),\n  },\n  background: {\n    backgroundColor: '#FFF8EF',\n    minHeight: '100vh',\n    padding: theme.spacing(3),\n  }\n});\n\nclass App extends Component {\n\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.background}>\n        <MuiThemeProvider theme={theme}>\n          <ButtonAppBar />\n          <div className={classes.headerSpace}/>\n          <Container>\n            <Grid item  xs={12} md={12}>\n              <Blog blogposts={BLOGPOST} />\n            </Grid>\n          </Container>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}