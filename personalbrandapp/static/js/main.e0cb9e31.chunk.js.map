{"version":3,"sources":["aboutme.md","ButtonAppBar.js","Markdown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","Link","href","color","options","overrides","h1","component","props","gutterBottom","h2","h3","h4","paragraph","p","a","li","withStyles","listItem","marginTop","Markdown","createMuiTheme","palette","primary","main","secondary","type","typography","useNextVariants","App","state","blogpost","this","index","BLOGPOST","filename","fetch","then","response","text","console","log","setState","concat","markdown","Container","Grid","item","xs","md","Component","body2","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAAAA,EAAOC,QAAU,IAA0B,oC,2KCOrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,SACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAC1C,kBAACS,EAAA,EAAD,CAAMC,KAAK,IAAKC,MAAM,WAAtB,gBAIF,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,e,0CCnBJY,EAAU,CACdC,UAAW,CACTC,GAAI,CACFC,UAAWR,IACXS,MAAO,CACLC,cAAc,EACdT,QAAS,OAGbU,GAAI,CAAEH,UAAWR,IAAYS,MAAO,CAAEC,cAAc,EAAMT,QAAS,OACnEW,GAAI,CAAEJ,UAAWR,IAAYS,MAAO,CAAEC,cAAc,EAAMT,QAAS,cACnEY,GAAI,CACFL,UAAWR,IACXS,MAAO,CAAEC,cAAc,EAAMT,QAAS,UAAWa,WAAW,IAE9DC,EAAG,CAAEP,UAAWR,IAAYS,MAAO,CAAEK,WAAW,IAChDE,EAAG,CAAER,UAAWN,KAChBe,GAAI,CACFT,UAAWU,aAxBF,SAAA/B,GAAK,MAAK,CACvBgC,SAAU,CACRC,UAAWjC,EAAMK,QAAQ,OAsBZ0B,EAAmB,gBAAGvB,EAAH,EAAGA,QAAYc,EAAf,kCAC5B,wBAAIb,UAAWD,EAAQwB,UACrB,kBAACnB,EAAA,EAAD,eAAYQ,UAAU,QAAWC,WAO5B,SAASY,EAASZ,GAC/B,OAAO,kBAAC,IAAD,eAAeJ,QAASA,GAAaI,I,4BC7BxCtB,G,MAAQmC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,WACnBE,KAAM,SAERC,WAAY,CAAEC,iBAAiB,MAU3BC,E,YAGJ,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDsB,MAAQ,CAAEC,SAAU,IAFR,E,iFAKE,IAAD,OACVrC,EAAYsC,KAAKxB,MAAjBd,QACR,IAAK,IAAIuC,KAASC,EAASC,SACzBC,MAAM,IAAMF,EAASC,SAASF,IAAQI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC/DF,MAAK,SAAAE,GACJC,QAAQC,IAAI,EAAKX,MAAMC,UACvB,EAAKW,SAAS,CAACX,SAAU,EAAKD,MAAMC,SAASY,OAC3C,kBAACvB,EAAD,CAAUzB,UAAWD,EAAQkD,UAC1BL,W,+BAOSP,KAAKxB,MAAjBd,QAER,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAkBT,MAAOA,GACvB,kBAACO,EAAD,MACA,kBAACoD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAAEC,GAAI,GAAIC,GAAI,IACrBjB,KAAKF,MAAMC,iB,GA/BRmB,aAwCHjC,eA/CA,SAAA/B,GAAK,MAAK,CACvB0D,SAAS,eACJ1D,EAAMyC,WAAWwB,MADd,CAENC,WAAYlE,EAAMK,QAAQ,SA4Cf0B,CAAmBY,GCvDdwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.e0cb9e31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aboutme.e7c134b2.md\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <Link href=\"/\"  color=\"inherit\">\r\n              Benjamin Yu\r\n            </Link>\r\n          </Typography>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            About me\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactMarkdown from 'markdown-to-jsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst styles = theme => ({\r\n  listItem: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n});\r\n\r\nconst options = {\r\n  overrides: {\r\n    h1: {\r\n      component: Typography,\r\n      props: {\r\n        gutterBottom: true,\r\n        variant: 'h5',\r\n      },\r\n    },\r\n    h2: { component: Typography, props: { gutterBottom: true, variant: 'h6' } },\r\n    h3: { component: Typography, props: { gutterBottom: true, variant: 'subtitle1' } },\r\n    h4: {\r\n      component: Typography,\r\n      props: { gutterBottom: true, variant: 'caption', paragraph: true },\r\n    },\r\n    p: { component: Typography, props: { paragraph: true } },\r\n    a: { component: Link },\r\n    li: {\r\n      component: withStyles(styles)(({ classes, ...props }) => (\r\n        <li className={classes.listItem}>\r\n          <Typography component=\"span\" {...props} />\r\n        </li>\r\n      )),\r\n    },\r\n  },\r\n};\r\n\r\nexport default function Markdown(props) {\r\n  return <ReactMarkdown options={options} {...props} />;\r\n}","import React, {Component} from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Markdown from './Markdown';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport BLOGPOST from './blogpost.json';\nimport aboutme from './aboutme.md';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#c6ebc6' }, //light green\n    secondary: { main: '#FFF8EF' }, //tan\n    type: 'light',\n  },\n  typography: { useNextVariants: true },\n});\n\nconst styles = theme => ({\n  markdown: {\n    ...theme.typography.body2,\n    paddingTop: theme.spacing(10),\n  },\n});\n\nclass App extends Component {\n\n\n  constructor(props) {\n    super(props);\n    this.state = { blogpost: []};\n  }\n\n  componentDidMount() {\n    const { classes } = this.props;\n    for (var index in BLOGPOST.filename) {\n      fetch(\"/\" + BLOGPOST.filename[index]).then((response) => response.text())\n        .then(text => {\n          console.log(this.state.blogpost);\n          this.setState({blogpost: this.state.blogpost.concat(\n            <Markdown className={classes.markdown}>\n              {text}\n            </Markdown>\n          )})})\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={theme}>\n          <ButtonAppBar />\n          <Container>\n            <Grid item  xs={12} md={12}>\n              {this.state.blogpost}\n            </Grid>\n          </Container>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}